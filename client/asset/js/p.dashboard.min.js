var currentMarkType = null // 1 = Pin Drop, 2 = Area Mark, 3 = Circle Mark
var prevMarkType = null
var markPinDrops = []
var markArea = []
var markCircle = []
var drawingManager = null
var pageWrapper = $('#page-dashboard')
var mapName = 'dashboard-map'
var selectHand = $('#mark-trigger-select')
var pinDrop = $('#mark-trigger-pin-drop')
var areaMark = $('#mark-trigger-area')
var circleMark = $('#mark-trigger-circle')
var currentMark = $('#mark-current')
var markerDelete = $('#btn-marker-delete')
var markerSave = $('#btn-marker-save')
var detailTitle = $('#detail-title')
var detailClose = $('#btn-detail-close')
var forceOpenDetail = false
var selectedIndex = -1

function initMarkerIcon(marker){
  var iconImage = null
  var iconImageFocus = null

  if(marker.isAdd){
    iconImage = 'asset/image/marker-pin-add.png'
    iconImageFocus = 'asset/image/marker-pin-add-active.png'
  } else if(marker.isPass){
    iconImage = 'asset/image/marker-pin-pass.png'
    iconImageFocus = 'asset/image/marker-pin-pass-active.png'
  } else if(!marker.isPass){
    iconImage = 'asset/image/marker-pin-notpass.png'
    iconImageFocus = 'asset/image/marker-pin-notpass-active.png'
  }

  marker.setIcon(iconImage)
  marker.iconIdle = iconImage
  marker.iconFocus = iconImageFocus

  return marker
}

function initMarker(pin){
  var marker = null
  var markerCondition = []

  pin.condition.forEach(function(condition){
    if(condition.type == "NUMBER"){
      markerCondition.push({
        type: "NUMBER",
        range: condition.range,
        number: condition.number
      })
    }
  })

  marker = new google.maps.Marker({
    index: markPinDrops.length,
    title: pin.name,
    position: {lat: pin.pos.lat, lng: pin.pos.lng},
    map: mapincGoogleMap[mapName],
    condition: markerCondition,
    isPass: pin.isPass,
    isAdd: pin.isAdd
  })

  marker = initMarkerIcon(marker)

  google.maps.event.addListener(marker, 'click', function(e){
    selectedIndex = marker.index
    marker.setIcon(marker.iconFocus)
    pageWrapper.addClass('open-detail')
    detailTitle.text((marker.title) ? marker.title : 'New Record')
    $('#txt-pin-name').val(marker.title)
    $('#0000-condition').val(marker.condition[0].range)
    $('#0000-number').val(marker.condition[0].number)
    detailClose.unbind().on('click', function(){
      selectedIndex = -1
      pageWrapper.removeClass('open-detail')
      marker.setIcon(marker.iconIdle)
      detailTitle.text('')
      mapincGoogleMap[mapName].setOptions({'draggable': true, 'scrollwheel': true})
    })
    mapincGoogleMap[mapName].panTo({lat:marker.position.lat(), lng:marker.position.lng() + 0.00909})
    mapincGoogleMap[mapName].setOptions({'draggable': false, 'scrollwheel': false})
  })

  markPinDrops.push(marker)
}

function initMapData(){
  // AJAX GOES HERE - START
  var jsonFile = [
    {
      "name": "Branch #1",
      "type": 1,
      "pos": {
        "lat": -6.218676180343762,
        "lng": 106.78157329559326
      },
      "condition": [
        {
          "type": "NUMBER",
          "range": "GT",
          "number": 10000
        }
      ],
      "isAdd": false,
      "isPass": true
    },
    {
      "name": "Branch #2",
      "type": 1,
      "pos": {
        "lat": -6.179680921992185,
        "lng": 106.96040153503418
      },
      "condition": [
        {
          "type": "NUMBER",
          "range": "LT",
          "number": 5000
        }
      ],
      "isAdd": false,
      "isPass": true
    },
    {
      "name": "Branch #3",
      "type": 1,
      "pos": {
        "lat": -6.222985107282696,
        "lng": 106.82015419006348
      },
      "condition": [
        {
          "type": "NUMBER",
          "range": "LT",
          "number": 50000
        }
      ],
      "isAdd": false,
      "isPass": false
    }
  ]

  jsonFile.forEach(function(item){
    initMarker(item)
  })
  // AJAX GOES HERE - END
}

function initMarkTrigger(){
  function initCurrentMark(type, pointer){
    currentMarkType = type
    currentMark.empty().append(pointer.html())
    pointer.closest('ul').find('li a').removeClass('active')
    pointer.addClass('active')
  }

  selectHand.unbind().on("click", function(event){
    event.preventDefault()
    if(forceOpenDetail){
      forceOpenDetail = false
      new google.maps.event.trigger(markPinDrops[markPinDrops.length-1], 'click')
    } else {
      initCurrentMark(1, $(this))
      if(drawingManager){
        drawingManager.setMap(null)
        drawingManager.setOptions({
          drawingMode: null
        })

        drawingManager.setMap(mapincGoogleMap[mapName])
      }
    }
  })

  pinDrop.unbind().on("click", function(event){
    event.preventDefault()
    initCurrentMark(2, $(this))
    if(drawingManager){
      drawingManager.setMap(null)
      drawingManager.setOptions({
        drawingMode: google.maps.drawing.OverlayType.MARKER
      })

      drawingManager.setMap(mapincGoogleMap[mapName])
    }
  })

  areaMark.unbind().on("click", function(event){
    event.preventDefault()
    initCurrentMark(3, $(this))
    if(drawingManager){
      drawingManager.setMap(null)
      drawingManager.setOptions({
        drawingMode: google.maps.drawing.OverlayType.POLYGON
      })

      drawingManager.setMap(mapincGoogleMap[mapName])
    }
  })

  circleMark.unbind().on("click", function(event){
    event.preventDefault()
    initCurrentMark(4, $(this))
    if(drawingManager){
      drawingManager.setMap(null)
      drawingManager.setOptions({
        drawingMode: google.maps.drawing.OverlayType.CIRCLE
      })

      drawingManager.setMap(mapincGoogleMap[mapName])
    }
  })
}

function initMapAction(){
  iconImage = 'asset/image/marker-pin-passive.png'

  drawingManager = new google.maps.drawing.DrawingManager({
    drawingMode: google.maps.drawing.OverlayType.POLYGON,
    drawingControl: false,
    markerOptions: {icon: iconImage},
    polygonOptions: {
      fillColor: mapincColorMain2,
      fillOpacity: 0.4,
      strokeColor: mapincColorMain1,
      strokeWeight: 2,
      editable: true
    },
    circleOptions: {
      fillColor: mapincColorMain2,
      fillOpacity: 0.4,
      strokeColor: mapincColorMain1,
      strokeWeight: 2,
      clickable: false,
      editable: true,
      zIndex: 1
    }
  })

  google.maps.event.addListener(drawingManager, 'overlaycomplete', function (e) {
    var newMarker = {
      "title": null,
      "type": null,
      "pos": {
        "lat": e.overlay.position.lat(),
        "lng": e.overlay.position.lng()
      },
      "condition": [
        {
          "type": "NUMBER",
          "range": $('#0000-condition').val().trim(),
          "number": $('#0000-number').val().trim()
        }
      ],
      "isAdd": true,
      "isPass": false
    }

    var tempMarker = e.overlay
    tempMarker.setMap(null)

    if(e.type === google.maps.drawing.OverlayType.MARKER){
      newMarker.type = 1
      initMarker(newMarker)
      forceOpenDetail = true
      selectHand.trigger('click')
    }
  })

  markerDelete.unbind().on('click', function(){
    markPinDrops[selectedIndex].setMap(null)
    detailClose.trigger('click')
    // AJAX DELETE GOES HERE - START
    // AJAX DELETE GOES HERE - END
  })

  markerSave.unbind().on('click', function(){
    markPinDrops[selectedIndex].title = $('#txt-pin-name').val().trim()
    markPinDrops[selectedIndex].condition = [
      {
        type: 'number',
        range: $('#0000-condition').val().trim(),
        number: $('#0000-number').val().trim()
      }
    ]
    if(markPinDrops[selectedIndex].isAdd){
      markPinDrops[selectedIndex].isAdd = false
      markPinDrops[selectedIndex] = initMarkerIcon(markPinDrops[selectedIndex])
      // AJAX SAVE UPDATE GOES HERE - START
      // AJAX SAVE UPDATE GOES HERE - END
    }
    detailClose.trigger('click')
  })
}

function initDashboard(){
  initMarkTrigger()
  initMapAction()
  initMapData()
}

$(function(){
  verify(initDashboard(), false, 'p.signin.html')
})
